package com.example.accessingdatamysql;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.PathVariable;

import org.springframework.jdbc.core.JdbcTemplate;
import java.util.List;
import java.util.Map;
import java.lang.String;
import java.lang.Object;

@Controller // This means that this class is a Controller
@RequestMapping(path="/mascotas") // This means URL's start with /demo (after Application path)
public class MainController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private MascotasRepository mascotasRepository;

  @Autowired
  private JdbcTemplate jdbcTemplate;

  @PostMapping(path="/add") // Map ONLY POST Requests
  public @ResponseBody String addNewMascota (@RequestParam String name
      , @RequestParam String raza, @RequestParam String propietario) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

    Mascotas m = new Mascotas();
    m.setName(name);
    m.setRaza(raza);
    m.setPropietario(propietario);
    mascotasRepository.save(m);
    return "Saved";
  }

  @GetMapping(path="/all")
  public @ResponseBody Iterable<Mascotas> getAllMascotas() {
    // This returns a JSON or XML with the users
    return mascotasRepository.findAll();
  }

  @PutMapping(path="/edit")
  public @ResponseBody String editMascotas(@RequestParam Integer id, @RequestParam String name, @RequestParam String raza, @RequestParam String propietario ) {
    Mascotas m = new Mascotas();
    m.setId(id);
    m.setName(name);
    m.setRaza(raza);
    m.setPropietario(propietario);
    mascotasRepository.save(m);
    return "Updated";
  }

  @GetMapping(path="/ver/{id}")
  public @ResponseBody Mascotas getOneMascotas(@PathVariable Integer id) {
    return mascotasRepository.findById(id).orElse(null);
  }

  @DeleteMapping(path="/del")
  public @ResponseBody String deleteMascotas(@RequestParam Integer id) {
    Mascotas m = new Mascotas();
    m.setId(id);
    mascotasRepository.delete(m);
    return "Deleted";
  }

  @GetMapping(path="/get/report")
  public @ResponseBody List reporte() {
    String sql = "SELECT CONCAT(name, ' ==> ', raza,' ==> ', propietario) as mycol FROM mascotas";
    List<Map<String, Object>> results = jdbcTemplate.queryForList(sql);
    return results;
  }


}
